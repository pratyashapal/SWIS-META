import os

# Loading configuration
configfile: "config.yaml"

# Defining paths and parameters from config
index_path = config["INDEX_PATH"]
raw_path = config["RAW_PATH"]
trim_path = config["TRIM_PATH"]
host_db = config["HOST_DB"]
graft_db = config["GRAFT_DB"]
xeno_dir = config["XENO_DIR"]

# List of sample names from raw_path
samples = [os.path.basename(f).split('_R1_001.fastq.gz')[0] for f in os.listdir(raw_path) if f.endswith('_R1_001.fastq.gz')]

# Rule to produce final output
rule all:
    input:
        expand(os.path.join(xeno_dir, "{sample}_graft.1.fq.gz"), sample=samples) +
        expand(os.path.join(xeno_dir, "{sample}_graft.2.fq.gz"), sample=samples) +
        expand(os.path.join(xeno_dir, "{sample}_ambiguous.1.fq.gz"), sample=samples) +
        expand(os.path.join(xeno_dir, "{sample}_ambiguous.2.fq.gz"), sample=samples) +
        expand(os.path.join(xeno_dir, "{sample}_host.1.fq.gz"), sample=samples) +
        expand(os.path.join(xeno_dir, "{sample}_host.2.fq.gz"), sample=samples) +
        expand(os.path.join(xeno_dir, "{sample}_both.1.fq.gz"), sample=samples) +
        expand(os.path.join(xeno_dir, "{sample}_both.2.fq.gz"), sample=samples) +
        expand(os.path.join(xeno_dir, "{sample}_neither.1.fq.gz"), sample=samples) +
        expand(os.path.join(xeno_dir, "{sample}_neither.2.fq.gz"), sample=samples)

# Rule to build index for xenograft
rule build_index:
    output:
        index = directory(os.path.join(index_path, "xengsort_index"))
    run:
        if not os.path.exists(os.path.join(output.index, "xengsort_index")):
            shell("""
                xengsort index --index {output.index} -H {host_db} -G {graft_db} -n 4_500_000_000 -k 25
            """)

# Rule to classify reads based on the built index
rule classify_reads:
    input:
        index = rules.build_index.output.index,
        r1 = lambda wildcards: os.path.join(trim_path if config["TRIM"] == "yes" else raw_path, f"{wildcards.sample}_R1_001_paired.fastq" if config["TRIM"] == "yes" else f"{wildcards.sample}_R1_001.fastq.gz"),
        r2 = lambda wildcards: os.path.join(trim_path if config["TRIM"] == "yes" else raw_path, f"{wildcards.sample}_R2_001_paired.fastq" if config["TRIM"] == "yes" else f"{wildcards.sample}_R2_001.fastq.gz")
    output:
        graft_r1 = os.path.join(xeno_dir, "{sample}_graft.1.fq.gz"),
        graft_r2 = os.path.join(xeno_dir, "{sample}_graft.2.fq.gz"),
        ambiguous_r1 = os.path.join(xeno_dir, "{sample}_ambiguous.1.fq.gz"),
        ambiguous_r2 = os.path.join(xeno_dir, "{sample}_ambiguous.2.fq.gz"),
        host_r1 = os.path.join(xeno_dir, "{sample}_host.1.fq.gz"),
        host_r2 = os.path.join(xeno_dir, "{sample}_host.2.fq.gz"),
        both_r1 = os.path.join(xeno_dir, "{sample}_both.1.fq.gz"),
        both_r2 = os.path.join(xeno_dir, "{sample}_both.2.fq.gz"),
        neither_r1 = os.path.join(xeno_dir, "{sample}_neither.1.fq.gz"),
        neither_r2 = os.path.join(xeno_dir, "{sample}_neither.2.fq.gz")
    run: 
       xengsort_command = f"""
           xengsort classify --index {input.index} --fastq {input.r1} --pairs {input.r2} --prefix {os.path.join(xeno_dir, wildcards.sample)} --mode xengsort
       """
       shell (xengsort_command)


import os

configfile: "config.yaml"

# Define paths from the config file

raw_path = config["RAW_PATH"]
trim_path = config["TRIM_PATH"]
output_path = config["OUT_FINAL"]
xeno_filter = config["XENO_FILTER"]
out_path = config["XENO_DIR"]
graft_db = config["GRAFT_DB"]
trim = config["TRIM"]
index_path = config["INDEX"]
gtf_file = config["GTF_FILE"]


# Ensure output directory exists
os.makedirs(output_path, exist_ok=True)

# List of sample names
samples = [os.path.basename(f).split('_R1_001.fastq.gz')[0] for f in os.listdir(raw_path) if f.endswith('_R1_001.fastq.gz')]

rule all:
    input:
        expand(os.path.join(output_path, "bam_files", "{sample}_sorted.bam"), sample=samples),
        os.path.join(output_path, "gene_symbol_counts_matrix.csv")

rule hisat2_index:
    output:
        expand(os.path.join(index_path, "GRCh38.{ext}"), ext=["1.ht2", "2.ht2", "3.ht2", "4.ht2", "5.ht2", "6.ht2", "7.ht2", "8.ht2"])
    run:
        if not all(os.path.exists(f) for f in output):
          shell(f"hisat2-build {graft_db} {os.path.join(index_path, 'GRCh38')}")

rule align_reads:
    input:
        index_files = expand(os.path.join(index_path, "GRCh38.{ext}"), ext=["1.ht2", "2.ht2", "3.ht2", "4.ht2", "5.ht2", "6.ht2", "7.ht2", "8.ht2"]),
        r1 = lambda wildcards: os.path.join(out_path if xeno_filter == "yes" else (trim_path if trim == "yes" else raw_path), f"{wildcards.sample}_graft.1.fq.gz" if xeno_filter == "yes" else f"{wildcards.sample}_R1_001_paired.fastq" if trim == "yes" else f"{wildcards.sample}_R1_001.fastq.gz"),
        r2 = lambda wildcards: os.path.join(out_path if xeno_filter == "yes" else (trim_path if trim == "yes" else raw_path), f"{wildcards.sample}_graft.2.fq.gz" if xeno_filter == "yes" else f"{wildcards.sample}_R2_001_paired.fastq" if trim == "yes" else f"{wildcards.sample}_R2_001.fastq.gz")
    output:
        bam = os.path.join(output_path, "bam_files", "{sample}_sorted.bam")
    run:
        index_base = os.path.join(index_path, 'GRCh38')
        sam_output = os.path.join(output_path, 'bam_files', f'{wildcards.sample}.sam')
        bam_output = output.bam

        shell(f"""
            hisat2 -p 8 -x {index_base} -1 {input.r1} -2 {input.r2} -S {sam_output}
            samtools view -bS {sam_output} > {bam_output.replace('_sorted.bam', '.bam')}
            samtools sort {bam_output.replace('_sorted.bam', '.bam')} -o {bam_output}
            samtools index {bam_output}
        """)

rule count_reads:
    input:
        bam = rules.align_reads.output.bam
    output:
        counts = os.path.join(output_path, "counts", "{sample}_counts.txt")
    run:
        if not os.path.exists(output.counts):
            shell("""
                featureCounts -a {gtf_file} -o {output.counts} -t exon -g gene_id -s 2 -p -B {input.bam}
            """)

rule count_matrix:
    input:
        expand(os.path.join(output_path, "counts", "{sample}_counts.txt"), sample=samples)
    output:
        os.path.join(output_path, "gene_symbol_counts_matrix.csv")
    params:
        config="config.yaml"
    script:
        "matrix_script.R"

